apiVersion: v1 # Specifies what version of K8s you want to use
kind: Service # A service is used to expose your Deployment to the external access
metadata:
  name: protvar-be
spec:
  ports: # Don't set nodePort (external facing) in case it's conflict with another services
    - port: 80 # Internally exposes the service on this port within the k8s cluster. Other pods within the cluster can communicate with this server on this port
      protocol: TCP
      targetPort: 8080 # The port on which the service will forward requests to, that your pod will be listening on. springboot in the container will need to be listening on this port also.
  selector:
    app: protvar-be # Selects the Deployment to attach the Service to
  type: NodePort # Tell K8s this wants to expose an external port
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: protvar-pvc
spec:
  storageClassName: standard-nfs-production
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: protvar-be
spec:
  selector:
    matchLabels:
      app: protvar-be # Has to match .spec.template.metadata.labels
  replicas: 1
  revisionHistoryLimit: 0
  template:
    metadata:
      labels:
        app: protvar-be # Has to match .spec.selector.matchLabels
    spec:
      terminationGracePeriodSeconds: 10
      containers:
        - name: protvar-be
          image: dockerhub.ebi.ac.uk/uniprot/deployment/mirror-protvar-be:{{ .Values.imageTag }}
          ports:
            - containerPort: 8080 # default port for springboot
          volumeMounts:
            - name: protvar-be-logs
              mountPath: /var/log
            - name: protvar-data
              mountPath: /data
          env:
            - name: logging.file.path
              value: /var/log
          envFrom:
            - secretRef:
                name: protvar-be-secret
            - configMapRef:
                name: protvar-be-configmap
          livenessProbe:
            httpGet:
              path: /ProtVar/api/actuator/health/liveness
              port: 8080
            initialDelaySeconds: 4 # wait 4 seconds before performing the first liveness probe
            periodSeconds: 5 # perform a liveness probe every 5 seconds
          readinessProbe:
            httpGet:
              path: /ProtVar/api/actuator/health/readiness
              port: 8080
            initialDelaySeconds: 5 # wait 5 seconds before performing the first readiness probe
            periodSeconds: 3 # perform a readiness probe every 3 seconds
          resources:
            requests:
              memory: "256Mi"
              cpu: "500m"
            limits:
              memory: "512Mi"
      volumes:
        - name: protvar-be-logs
          persistentVolumeClaim:
            claimName: protvar-pvc
        - name: protvar-data
          persistentVolumeClaim:
            claimName: protvar-pvc
      imagePullSecrets:
        - name: protvar-be-gitlab-registry-ci # created by deploy script using env variables Provided by GitLab, this allows K8s to connect to dockerhub.ebi.ac.uk
        - name: protvar-be-gitlab-registry-to # using token if exist
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: protvar-be-configmap
data:
  JAVA_TOOL_OPTIONS: >-
    -Dhttp.proxyPort=3128 -Dhttp.proxySet=true -Dhttps.proxyPort=3128 -Dhttps.proxySet=true
    -Dhttp.nonProxyHosts=localhost|127.0.0.1|.cluster.local {{ .Values.jvmOptions }}
  spring.datasource.url: {{ .Values.env.dbURL }}
  spring.datasource.username: {{ .Values.env.dbUser }}
  spring.mail.host: {{ .Values.env.emailSMTP }}
---
apiVersion: v1
kind: Secret
metadata:
  name: protvar-be-secret
data:
  spring.datasource.password: {{ .Values.env.dbPassword }}